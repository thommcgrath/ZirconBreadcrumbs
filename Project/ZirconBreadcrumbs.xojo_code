#tag Class
Protected Class ZirconBreadcrumbs
Inherits ArtisanKit.Control
	#tag Event
		Function MouseDown(X As Integer, Y As Integer) As Boolean
		  If Not Self.Registered Then
		    Return False
		  End If
		  
		  Self.mMouseDownPoint = New REALbasic.Point(X,Y)
		  Dim CellIndex As Integer = Self.CellIndexForPoint(Self.mMouseDownPoint)
		  If CellIndex = -1 Then
		    Return True
		  End If
		  
		  Self.mMouseDownIndex = CellIndex
		  Self.mMouseDown = True
		  Self.Invalidate
		  Self.mHoldTimer = New Timer
		  Self.mHoldTimer.Period = 750
		  Self.mHoldTimer.Mode = Timer.ModeSingle
		  AddHandler mHoldTimer.Action, AddressOf HoldTimerAction
		  Return True
		End Function
	#tag EndEvent

	#tag Event
		Sub MouseDrag(X As Integer, Y As Integer)
		  If Not Self.mMouseDown Then
		    Return
		  End If
		  
		  If X < Self.mMouseDownPoint.X -5 Or X > Self.mMouseDownPoint.X + 5 Or Y < Self.mMouseDownPoint.Y - 5 Or Y > Self.mMouseDownPoint.Y + 5 Then
		    If Self.mHoldTimer <> Nil Then
		      RemoveHandler mHoldTimer.Action, AddressOf HoldTimerAction
		      Self.mHoldTimer.Mode = Timer.ModeOff
		      Self.mHoldTimer = Nil
		    End If
		    Self.mMouseDown = False
		    Self.Invalidate
		  End If
		End Sub
	#tag EndEvent

	#tag Event
		Sub MouseUp(X As Integer, Y As Integer)
		  If Not Self.mMouseDown Then
		    Return
		  End If
		  
		  If Self.mHoldTimer <> Nil Then
		    RemoveHandler mHoldTimer.Action, AddressOf HoldTimerAction
		    Self.mHoldTimer.Mode = Timer.ModeOff
		    Self.mHoldTimer = Nil
		  End If
		  
		  Self.mMouseDown = False
		  Self.mMouseDownPoint = Nil
		  Dim CellIndex As Integer = Self.CellIndexForPoint(New REALbasic.Point(X,Y))
		  If Self.mMouseDownIndex = CellIndex Then
		    Self.Value = CellIndex
		  End If
		  Self.Invalidate
		End Sub
	#tag EndEvent

	#tag Event
		Sub Open()
		  Self.AddCells("Home")
		  RaiseEvent Open
		End Sub
	#tag EndEvent

	#tag Event
		Sub Paint(G As Graphics, Areas() As REALbasic.Rect, ScalingFactor As Double, Highlighted As Boolean)
		  #pragma Unused Areas
		  #pragma Unused Highlighted
		  
		  If Not Self.Registered Then
		    Return
		  End If
		  
		  Const CellPadding = 4
		  
		  If Self.mSprites = Nil Or Self.mSprites.Lookup("ScalingFactor",0) <> ScalingFactor Then
		    Dim Sheet As Picture = Self.GetSpriteSheet(ScalingFactor)
		    Self.mSprites = New Dictionary
		    Self.mSprites.Value("ScalingFactor") = ScalingFactor
		    Self.mSprites.Value("DividerAlternateToAlternate")        = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  0,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("FillAlternate")                      = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  1,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("CapAlternate")                       = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  2,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerAlternateToPrimary")          = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  3,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("FillPrimary")                        = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  4,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("CapPrimary")                         = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  5,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerPrimaryToAlternate")          = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  6,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerAlternateToAlternatePressed") = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  7,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("FillAlternatePressed")               = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  8,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerAlternatePressedToAlternate") = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth *  9,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("CapAlternatePressed")                = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 10,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerAlternateToPrimaryPressed")   = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 11,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("FillPrimaryPressed")                 = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 12,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerPrimaryPressedToAlternate")   = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 13,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("CapPrimaryPressed")                  = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 14,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerAlternatePressedToPrimary")   = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 15,0,SpriteWidth,SpriteHeight))
		    Self.mSprites.Value("DividerPrimaryToAlternatePressed")   = Self.GrabSprite(Sheet, ScalingFactor, New REALbasic.Rect(SpriteWidth * 16,0,SpriteWidth,SpriteHeight))
		  End If
		  
		  Dim TopPosition As Integer = 0
		  If Self.BorderPosition = BorderTop Then
		    TopPosition = 1
		  End If
		  
		  Dim Fill As Picture = Self.mSprites.Value("FillAlternate")
		  G.FillWithPattern(Fill,New REALbasic.Rect(0,TopPosition,G.Width,SpriteHeight))
		  
		  If UBound(Self.mCells) > -1 Then
		    Dim Rects() As REALbasic.Rect
		    Dim NextLeft As Integer = 0
		    Redim Rects(UBound(Self.mCells))
		    For I As Integer = 0 To UBound(Self.mCells)
		      Dim W As Integer = Ceil(G.StringWidth(Self.mCells(I))) + (CellPadding * 2)
		      If Self.mCellIcons(I) <> Nil Then
		        If Self.mCells(I) <> "" Then
		          W = W + IconWidth + CellPadding
		        Else
		          W = W + IconWidth
		        End If
		      End If
		      If I  = 0 Or I = UBound(Self.mCells) Then
		        W = W + CellPadding
		      End If
		      Rects(I) = New REALbasic.Rect(NextLeft,TopPosition,W,SpriteHeight)
		      NextLeft = NextLeft + W + SpriteWidth
		    Next
		    Dim DesiredWidth As Integer = NextLeft
		    
		    Dim AbsoluteMinimum As Integer = (Self.CellCount * (IconWidth + (CellPadding * 2) + SpriteWidth)) + (CellPadding * 2)
		    If G.Width <= AbsoluteMinimum Then
		      // Collapse Everything
		      NextLeft = 0
		      For I As Integer = 0 To UBound(Rects)
		        Rects(I).Left = NextLeft
		        Rects(I).Width = IconWidth + (CellPadding * 2)
		        If I  = 0 Or I = UBound(Self.mCells) Then
		          Rects(I).Width = Rects(I).Width + CellPadding
		        End If
		        NextLeft = Rects(I).Right + SpriteWidth
		      Next
		    ElseIf G.Width <= DesiredWidth Then
		      // Dynamic Scaling
		      Dim Groups() As Collection
		      If UBound(Self.mCells) > 2 Then
		        Dim Inner As New Collection
		        For I As Integer = 1 To UBound(Self.mCells) - 2
		          Inner.Add(I)
		        Next
		        Groups.Append(Inner)
		      End If
		      Dim RootGroup As New Collection
		      RootGroup.Add(0)
		      Groups.Append(RootGroup)
		      If UBound(Self.mCells) > 0 Then
		        Dim Group As New Collection
		        Group.Add(UBound(Self.mCells) - 1)
		        Groups.Append(Group)
		      End If
		      If UBound(Self.mCells) > 1 Then
		        Dim Group As New Collection
		        Group.Add(UBound(Self.mCells))
		        Groups.Append(Group)
		      End If
		      Do
		        For Each Group As Collection In Groups
		          Dim Count As Integer = Group.Count
		          Dim GroupWasSized As Boolean = False
		          For I As Integer = 1 To Count
		            Dim Index As Integer = Group.Item(I)
		            Dim MinWidth As Integer = IconWidth + (CellPadding * 2)
		            If Index = 0 Or Index = UBound(Self.mCells) Then
		              MinWidth = MinWidth + CellPadding
		            End If
		            If Rects(Index).Width > MinWidth Then
		              Rects(Index).Width = Rects(Index).Width - 1
		              DesiredWidth = DesiredWidth - 1
		              GroupWasSized = True
		              If DesiredWidth <= G.Width Then
		                Exit Do
		              End If
		            End If
		          Next
		          If DesiredWidth > G.Width And GroupWasSized Then
		            Continue Do
		          End If
		        Next
		      Loop
		      NextLeft = 0
		      For I As Integer = 0 To UBound(Rects)
		        Rects(I).Left = NextLeft
		        NextLeft = Rects(I).Right + SpriteWidth
		      Next
		    Else
		      // Everything Fits Nicely
		    End If
		    
		    For I As Integer = 0 To UBound(Self.mCells)
		      Dim Rect As REALbasic.Rect = Rects(I)
		      Dim CellCaption As String = Self.mCells(I)
		      Dim CellIcon As ArtisanKit.RetinaPicture = Self.mCellIcons(I)
		      Dim IsPressed As Boolean = Self.mMouseDown And Self.mMouseDownIndex = I
		      Dim IsNextPressed As Boolean = Self.mMouseDown And Self.mMouseDownIndex = I + 1
		      
		      Dim Cap As Picture
		      If Self.Value = I Then
		        If IsPressed Then
		          Fill = Self.mSprites.Value("FillPrimaryPressed")
		        Else
		          Fill = Self.mSprites.Value("FillPrimary")
		        End If
		        If I = UBound(Self.mCells) Then
		          If IsPressed Then
		            Cap = Self.mSprites.Value("CapPrimaryPressed")
		          Else
		            Cap = Self.mSprites.Value("CapPrimary")
		          End If
		        Else
		          If IsPressed Then
		            Cap = Self.mSprites.Value("DividerPrimaryPressedToAlternate")
		          ElseIf IsNextPressed Then
		            Cap = Self.mSprites.Value("DividerPrimaryToAlternatePressed")
		          Else
		            Cap = Self.mSprites.Value("DividerPrimaryToAlternate")
		          End If
		        End If
		      Else
		        If IsPressed Then
		          Fill = Self.mSprites.Value("FillAlternatePressed")
		        Else
		          Fill = Self.mSprites.Value("FillAlternate")
		        End If
		        If I = UBound(Self.mCells) Then
		          If IsPressed Then
		            Cap = Self.mSprites.Value("CapAlternatePressed")
		          Else
		            Cap = Self.mSprites.Value("CapAlternate")
		          End If
		        Else
		          If Self.Value = I + 1 Then
		            If IsPressed Then
		              Cap = Self.mSprites.Value("DividerAlternatePressedToPrimary")
		            ElseIf IsNextPressed Then
		              Cap = Self.mSprites.Value("DividerAlternateToPrimaryPressed")
		            Else
		              Cap = Self.mSprites.Value("DividerAlternateToPrimary")
		            End If
		          Else
		            If IsPressed Then
		              Cap = Self.mSprites.Value("DividerAlternatePressedToAlternate")
		            ElseIf IsNextPressed Then
		              Cap = Self.mSprites.Value("DividerAlternateToAlternatePressed")
		            Else
		              Cap = Self.mSprites.Value("DividerAlternateToAlternate")
		            End If
		          End If
		        End If
		      End If
		      
		      G.DrawPicture(Cap,Rect.Right,TopPosition,SpriteWidth,SpriteHeight,0,0,Cap.Width,Cap.Height)
		      G.FillWithPattern(Fill,Rect)
		      
		      Dim TextLeft As Integer = Rect.Left + CellPadding
		      Dim TextSpace As Integer = Rect.Width - (CellPadding * 2)
		      If I = 0 Then
		        TextLeft = TextLeft + CellPadding
		      End If
		      Dim TextColor, ShadowColor As Color
		      If Self.Value = I Then
		        TextColor = Self.PrimaryTextColor
		        ShadowColor = Self.PrimaryTextShadowColor
		      Else
		        TextColor = Self.AlternateTextColor
		        ShadowColor = Self.AlternateTextShadowColor
		      End If
		      If Self.mMouseDown And Self.mMouseDownIndex = I Then
		        TextColor = ArtisanKit.BlendColors(TextColor,&c000000,0.25)
		        ShadowColor = ArtisanKit.BlendColors(ShadowColor,&c000000,0.25)
		      End If
		      If CellIcon <> Nil Then
		        Dim IconRect As New REALbasic.Rect(TextLeft,Rect.VerticalCenter - (IconHeight / 2),IconWidth,IconHeight)
		        TextLeft = TextLeft + IconWidth + CellPadding
		        TextSpace = TextSpace - (IconWidth + CellPadding)
		        Select Case Me.CellIconType(I)
		        Case IconTypeTemplate
		          Dim Mask As Picture
		          If ScalingFactor > 1 Then
		            Mask = CellIcon.HiRes
		          Else
		            Mask = CellIcon
		          End If
		          Dim Icon As New Picture(IconWidth * ScalingFactor, IconHeight * ScalingFactor, 32)
		          Icon.Mask.Graphics.ClearRect(0,0,Icon.Width,Icon.Height)
		          Icon.Mask.Graphics.DrawPicture(Mask,0,0,Icon.Width,Icon.Height,0,0,Mask.Width,Mask.Height)
		          Icon.Graphics.ForeColor = ShadowColor
		          Icon.Graphics.FillRect(0,0,Icon.Width,Icon.Height)
		          G.DrawPicture(Icon,IconRect.Left,IconRect.Top + 1,IconRect.Width,IconRect.Height,0,0,Icon.Width,Icon.Height)
		          Icon.Graphics.ForeColor = TextColor
		          Icon.Graphics.FillRect(0,0,Icon.Width,Icon.Height)
		          G.DrawPicture(Icon,IconRect.Left,IconRect.Top,IconRect.Width,IconRect.Height,0,0,Icon.Width,Icon.Height)
		        Else
		          G.DrawRetinaPicture(CellIcon,IconRect.Left,IconRect.Top,IconRect.Width,IconRect.Height,0,0,CellIcon.Width,CellIcon.Height)
		        End Select
		      End If
		      If TextSpace > CellPadding Then
		        Dim TextTop As Integer = Rect.VerticalCenter + (G.CapHeight / 2)
		        G.ForeColor = ShadowColor
		        G.DrawString(CellCaption,TextLeft,TextTop + 1,TextSpace,True)
		        G.ForeColor = TextColor
		        G.DrawString(CellCaption,TextLeft,TextTop,TextSpace,True)
		      End If
		    Next
		    mCellRects = Rects
		  Else
		    Redim mCellRects(-1)
		  End If
		  
		  Select Case Self.BorderPosition
		  Case BorderNone
		    // Do Nothing
		  Case BorderTop
		    G.ForeColor = Self.BorderColor
		    G.DrawLine(-1,0,G.Width + 1,0)
		  Case BorderBottom
		    G.ForeColor = Self.BorderColor
		    G.DrawLine(-1,22,G.Width + 1,22)
		  End Select
		End Sub
	#tag EndEvent


	#tag Method, Flags = &h0
		Sub AddCells(ParamArray Cells() As String)
		  For Each Cell As String In Cells
		    Self.mCells.Append(Cell)
		    Self.mCellIcons.Append(Nil)
		    Self.mCellIconTypes.Append(IconTypeFullColor)
		  Next
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function Cell(Index As Integer) As String
		  Return Self.mCells(Index)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Cell(Index As Integer, Assigns NewValue As String)
		  Self.mCells(Index) = NewValue
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CellIcon(Index As Integer) As ArtisanKit.RetinaPicture
		  Return Self.mCellIcons(Index)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub CellIcon(Index As Integer, Assigns NewValue As ArtisanKit.RetinaPicture)
		  Self.mCellIcons(Index) = NewValue
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Function CellIconType(Index As Integer) As Integer
		  Return Self.mCellIconTypes(Index)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub CellIconType(Index As Integer, Assigns NewValue As Integer)
		  Self.mCellIconTypes(Index) = NewValue
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function CellIndexForPoint(Point As REALbasic.Point) As Integer
		  For I As Integer = 0 To UBound(mCellRects)
		    If mCellRects(I).Contains(Point) Then
		      Return I
		    End If
		  Next
		  Return -1
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub DeleteAllCells()
		  Self.CellCount = 0
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function GetImage(ImageNamed As String) As Picture
		  Static Images As Dictionary
		  If Images = Nil Then
		    Images = New Dictionary
		    
		    Const ImagesBinary
		    Dim ImagesBlock As New MemoryBlock(15349)
		    ImagesBlock.LittleEndian = True
		    ImagesBlock.StringValue(0,ImagesBlock.Size) = DecodeHex(ImagesBinary)
		    Images.Value("8390698C7A66FF203FDF08EE04A9ECC8") = Picture.FromData(ImagesBlock.StringValue(0,4678))
		    Images.Value("A078C85FD338875A9247873EC64626D6") = Picture.FromData(ImagesBlock.StringValue(4678,10671))
		  End If
		  
		  Dim Key As String = EncodeHex(MD5(ImageNamed))
		  If Images.HasKey(Key) Then
		    Return Images.Value(Key)
		  Else
		    Dim Err As New KeyNotFoundException
		    Err.Message = "Could not find image " + ImageNamed + ". Image names are case sensitive."
		    Raise Err
		  End If
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function GetSpriteSheet(ScalingFactor As Double) As Picture
		  Dim SheetWidth As Integer = Self.SpriteWidth * 17
		  Dim SheetHeight As Integer = Self.SpriteHeight * 1
		  
		  Dim Sheet As New Picture(SheetWidth * ScalingFactor, SheetHeight * ScalingFactor, 32)
		  Dim Source As Picture
		  If ScalingFactor > 1 Then
		    Source = Self.GetImage("Breadcrumbs@2x.png")
		  Else
		    Source = Self.GetImage("Breadcrumbs.png")
		  End If
		  Sheet.Graphics.DrawPicture(Source,0,0,Sheet.Width,Sheet.Height,0,0,Source.Width,Source.Height)
		  Sheet.HorizontalResolution = Sheet.HorizontalResolution * ScalingFactor
		  Sheet.VerticalResolution = Sheet.VerticalResolution * ScalingFactor
		  RaiseEvent Paint(Sheet.Graphics,ScalingFactor)
		  Return Sheet
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function GrabSprite(Source As Picture, ScalingFactor As Double, Bounds As REALbasic.Rect) As Picture
		  Dim Sprite As New Picture(SpriteWidth * ScalingFactor, SpriteHeight * ScalingFactor, 32)
		  Sprite.Graphics.DrawPicture(Source, 0, 0, Sprite.Width, Sprite.Height, Bounds.Left * ScalingFactor, Bounds.Top * ScalingFactor, Bounds.Width * ScalingFactor, Bounds.Height * ScalingFactor)
		  Return Sprite
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub HoldTimerAction(Sender As Timer)
		  #pragma Unused Sender
		  
		  If CellHold(Self.mMouseDownIndex) Then
		    Self.mMouseDown = False
		    Self.mMouseDownPoint = Nil
		    Self.Invalidate
		  End If
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub InsertCells(Index As Integer, ParamArray Cells() As String)
		  For Each Cell As String In Cells
		    Self.mCells.Insert(Index,Cell)
		    Self.mCellIcons.Insert(Index,Nil)
		    Self.mCellIconTypes.Insert(Index,IconTypeFullColor)
		    If Self.mValue >= Index Then
		      Self.mValue = Self.mValue + 1
		    End If
		    Index = Index + 1
		  Next
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub InvalidateSprites()
		  Self.mSprites = Nil
		  Self.Invalidate
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function Registered() As Boolean
		  #if DebugBuild
		    Return True
		  #else
		    Return False // Invoice: XXXXXXXXXXXXXXXXXXX
		  #endif
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub RemoveCells(Index As Integer, Count As Integer = 1)
		  Count = Min(Count,UBound(Self.mCells) - (Index - 1))
		  For I As Integer = 1 To Count
		    Self.mCells.Remove(Index)
		    Self.mCellIcons.Remove(Index)
		    Self.mCellIconTypes.Remove(Index)
		    If Self.mValue >= Index Then
		      Self.mValue = Self.mValue - 1
		    End If
		  Next
		  Self.Invalidate
		End Sub
	#tag EndMethod


	#tag Hook, Flags = &h0
		Event CellHold(CellIndex As Integer) As Boolean
	#tag EndHook

	#tag Hook, Flags = &h0
		Event Change()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event Open()
	#tag EndHook

	#tag Hook, Flags = &h0
		Event Paint(G As Graphics, ScalingFactor As Double)
	#tag EndHook


	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mAlternateTextColor
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Self.mAlternateTextColor = Value
			  Self.Invalidate
			End Set
		#tag EndSetter
		AlternateTextColor As Color
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mAlternateTextShadowColor
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Self.mAlternateTextShadowColor = Value
			  Self.Invalidate
			End Set
		#tag EndSetter
		AlternateTextShadowColor As Color
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mBorderColor
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Self.mBorderColor = Value
			  Self.Invalidate
			End Set
		#tag EndSetter
		BorderColor As Color
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mBorderPosition
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  If Value >= BorderNone And Value <= BorderTop Then
			    Self.mBorderPosition = Value
			    Self.Invalidate
			  End If
			End Set
		#tag EndSetter
		BorderPosition As Integer
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return UBound(Self.mCells) + 1
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Redim Self.mCells(Value - 1)
			  Redim Self.mCellIcons(Value - 1)
			  Redim Self.mCellIconTypes(Value - 1)
			  Self.Invalidate
			End Set
		#tag EndSetter
		CellCount As Integer
	#tag EndComputedProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mAlternateTextColor As Color
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mAlternateTextShadowColor As Color
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mBorderColor As Color
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mBorderPosition As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mCellIcons() As ArtisanKit.RetinaPicture
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mCellIconTypes() As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		mCellRects() As REALbasic.Rect
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mCells() As String
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mHoldTimer As Timer
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mMouseDown As Boolean
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mMouseDownIndex As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mMouseDownPoint As REALbasic.Point
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mPrimaryTextColor As Color
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mPrimaryTextShadowColor As Color
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mSprites As Dictionary
	#tag EndProperty

	#tag Property, Flags = &h21
		Attributes( Hidden ) Private mValue As Integer
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mPrimaryTextColor
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Self.mPrimaryTextColor = Value
			  Self.Invalidate
			End Set
		#tag EndSetter
		PrimaryTextColor As Color
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mPrimaryTextShadowColor
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Self.mPrimaryTextShadowColor = Value
			  Self.Invalidate
			End Set
		#tag EndSetter
		PrimaryTextShadowColor As Color
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  Return Self.mValue
			End Get
		#tag EndGetter
		#tag Setter
			Set
			  Value = Max(Min(Value,Self.CellCount - 1),0)
			  If Value <> Self.mValue Then
			    Self.mValue = Value
			    RaiseEvent Change()
			    Self.Invalidate
			  End If
			End Set
		#tag EndSetter
		Value As Integer
	#tag EndComputedProperty


	#tag Constant, Name = BorderBottom, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = BorderNone, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = BorderTop, Type = Double, Dynamic = False, Default = \"2", Scope = Public
	#tag EndConstant

	#tag Constant, Name = IconHeight, Type = Double, Dynamic = False, Default = \"16", Scope = Public
	#tag EndConstant

	#tag Constant, Name = IconTypeFullColor, Type = Double, Dynamic = False, Default = \"0", Scope = Public
	#tag EndConstant

	#tag Constant, Name = IconTypeTemplate, Type = Double, Dynamic = False, Default = \"1", Scope = Public
	#tag EndConstant

	#tag Constant, Name = IconWidth, Type = Double, Dynamic = False, Default = \"16", Scope = Public
	#tag EndConstant

	#tag Constant, Name = SpriteHeight, Type = Double, Dynamic = False, Default = \"22", Scope = Protected
	#tag EndConstant

	#tag Constant, Name = SpriteWidth, Type = Double, Dynamic = False, Default = \"12", Scope = Protected
	#tag EndConstant


	#tag ViewBehavior
		#tag ViewProperty
			Name="AlternateTextColor"
			Visible=true
			Group="Behavior"
			InitialValue="&c000000"
			Type="Color"
		#tag EndViewProperty
		#tag ViewProperty
			Name="AlternateTextShadowColor"
			Visible=true
			Group="Behavior"
			InitialValue="&cFFFFFF"
			Type="Color"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BorderColor"
			Visible=true
			Group="Behavior"
			InitialValue="&c9e9e9e"
			Type="Color"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BorderPosition"
			Visible=true
			Group="Behavior"
			InitialValue="1"
			Type="Integer"
			EditorType="Enum"
			#tag EnumValues
				"0 - None"
				"1 - Bottom"
				"2 - Top"
			#tag EndEnumValues
		#tag EndViewProperty
		#tag ViewProperty
			Name="CellCount"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="PrimaryTextColor"
			Visible=true
			Group="Behavior"
			InitialValue="&cFFFFFF"
			Type="Color"
		#tag EndViewProperty
		#tag ViewProperty
			Name="PrimaryTextShadowColor"
			Visible=true
			Group="Behavior"
			InitialValue="&c2d4959"
			Type="Color"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Value"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
